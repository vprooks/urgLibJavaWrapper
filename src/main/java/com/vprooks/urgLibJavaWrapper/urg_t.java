package com.vprooks.urgLibJavaWrapper;

import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : urg_sensor.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class urg_t extends Structure {
    public int is_active;
    public int last_errno;
    /**
     * C type : urg_connection_t
     */
    public urg_connection_t connection;
    public int first_data_index;
    public int last_data_index;
    public int front_data_index;
    public int area_resolution;
    public NativeLong scan_usec;
    public int min_distance;
    public int max_distance;
    public int scanning_first_step;
    public int scanning_last_step;
    public int scanning_skip_step;
    public int scanning_skip_scan;
    /**
     * @see UrgLib.urg_range_data_byte_t
     * C type : urg_range_data_byte_t
     */
    public int range_data_byte;
    public int timeout;
    public int specified_scan_times;
    public int scanning_remain_times;
    public int is_laser_on;
    public int received_first_index;
    public int received_last_index;
    public int received_skip_step;
    /**
     * @see UrgLib.urg_range_data_byte_t
     * C type : urg_range_data_byte_t
     */
    public int received_range_data_byte;
    public int is_sending;
    /**
     * C type : urg_error_handler
     */
    public UrgLib.urg_error_handler error_handler;
    /**
     * C type : char[80]
     */
    public byte[] return_buffer = new byte[80];

    public urg_t() {
        super();
    }

    protected List<?> getFieldOrder() {
        return Arrays.asList("is_active", "last_errno", "connection", "first_data_index", "last_data_index", "front_data_index", "area_resolution", "scan_usec", "min_distance", "max_distance", "scanning_first_step", "scanning_last_step", "scanning_skip_step", "scanning_skip_scan", "range_data_byte", "timeout", "specified_scan_times", "scanning_remain_times", "is_laser_on", "received_first_index", "received_last_index", "received_skip_step", "received_range_data_byte", "is_sending", "error_handler", "return_buffer");
    }

    public urg_t(Pointer peer) {
        super(peer);
    }

    public static class ByReference extends urg_t implements Structure.ByReference {

    }

    public static class ByValue extends urg_t implements Structure.ByValue {

    }
}
